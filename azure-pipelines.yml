trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'
  displayName: 'Set up JDK 17'

# Crear el directorio de caché si no existe
- bash: |
    mkdir -p $(MAVEN_CACHE_FOLDER)
  displayName: 'Create Maven cache directory'

- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
    path: $(MAVEN_CACHE_FOLDER)
  displayName: 'Cache Maven packages'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean verify'
    options: '-Dkarate.env=qa'
    publishJUnitResults: true 
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    mavenVersionOption: 'Default'
  displayName: 'Run Karate Tests'

- task: PublishTestResults@2
  condition: always()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'Karate Tests'
  displayName: 'Publish Test Results'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/cucumber-reports'
    ArtifactName: 'cucumber-reports'
    publishLocation: 'Container'
  displayName: 'Publish Cucumber Reports'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/karate-reports'
    ArtifactName: 'karate-reports'
    publishLocation: 'Container'
  displayName: 'Publish Karate Reports'

# Actualizar Test Cases usando la API REST
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Starting to process test results..."
      
      # Configuración de la API
      $organization = "$(System.CollectionUri)"
      $project = "$(System.TeamProject)"
      $pat = "$(System.AccessToken)"
      $apiVersion = "7.1-preview.1"
      
      # Codificar el PAT para la autenticación
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$pat"))
      
      # Función para actualizar el resultado del test case
      function Update-TestCase {
          param (
              [string]$testCaseId,
              [string]$outcome,
              [string]$scenarioName
          )
          
          $testPoint = $null
          
          # 1. Obtener el Test Point ID
          $testPointsUrl = "$organization$project/_apis/test/points?testCaseId=$testCaseId&api-version=$apiVersion"
          Write-Host "Getting Test Points: $testPointsUrl"
          
          try {
              $testPointsResponse = Invoke-RestMethod -Uri $testPointsUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Get
              if ($testPointsResponse.value -and $testPointsResponse.value.length -gt 0) {
                  $testPoint = $testPointsResponse.value[0].id
              }
          }
          catch {
              Write-Host "Error getting test points: $_"
              return
          }
          
          if ($testPoint) {
              # 2. Crear el Test Run
              $createRunUrl = "$organization$project/_apis/test/runs?api-version=$apiVersion"
              $createRunBody = @{
                  name = "Karate Test Run - $scenarioName"
                  automated = $true
                  pointIds = @($testPoint)
              } | ConvertTo-Json
              
              Write-Host "Creating Test Run: $createRunUrl"
              
              try {
                  $testRun = Invoke-RestMethod -Uri $createRunUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Post -Body $createRunBody -ContentType "application/json"
                  
                  # 3. Actualizar el resultado
                  $updateResultUrl = "$organization$project/_apis/test/runs/$($testRun.id)/results?api-version=$apiVersion"
                  $updateResultBody = @{
                      testCaseTitle = $scenarioName
                      testPoint = @{ id = $testPoint }
                      outcome = $outcome
                  } | ConvertTo-Json
                  
                  Write-Host "Updating Test Result: $updateResultUrl"
                  
                  $updateResponse = Invoke-RestMethod -Uri $updateResultUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Patch -Body $updateResultBody -ContentType "application/json"
                  Write-Host "Successfully updated test case $testCaseId with outcome $outcome"
              }
              catch {
                  Write-Host "Error updating test result: $_"
              }
          }
          else {
              Write-Host "No test points found for test case $testCaseId"
          }
      }
      
      # Procesar los resultados de Karate
      $jsonFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)/target" -Recurse -Filter "*.json"
      
      foreach ($file in $jsonFiles) {
          Write-Host "Processing file: $($file.FullName)"
          try {
              $jsonContent = Get-Content $file -Raw | ConvertFrom-Json
              
              if ($jsonContent.elements) {
                  foreach ($element in $jsonContent.elements) {
                      if ($element.tags) {
                          foreach ($tag in $element.tags) {
                              if ($tag.name -match '@TestCase=(\d+)') {
                                  $testCaseId = $matches[1]
                                  $outcome = "Passed"
                                  $scenarioName = $element.name
                                  
                                  foreach ($step in $element.steps) {
                                      if ($step.result.status -eq "failed") {
                                          $outcome = "Failed"
                                          break
                                      }
                                  }
                                  
                                  Write-Host "Updating Test Case #$testCaseId with outcome $outcome"
                                  Update-TestCase -testCaseId $testCaseId -outcome $outcome -scenarioName $scenarioName
                              }
                          }
                      }
                  }
              }
          }
          catch {
              Write-Host "Error processing JSON file: $_"
          }
      }
  displayName: 'Update Test Cases in Azure Test Plans'