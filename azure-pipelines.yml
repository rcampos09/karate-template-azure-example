trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'
  displayName: 'Set up JDK 17'

# Crear el directorio de cach√© si no existe
- bash: |
    mkdir -p $(MAVEN_CACHE_FOLDER)
  displayName: 'Create Maven cache directory'

- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
    path: $(MAVEN_CACHE_FOLDER)
  displayName: 'Cache Maven packages'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean verify'
    options: '-Dkarate.env=qa'
    publishJUnitResults: true 
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    mavenVersionOption: 'Default'
  displayName: 'Run Karate Tests'

- task: PublishTestResults@2
  condition: always()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'Karate Tests'
  displayName: 'Publish Test Results'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/cucumber-reports'
    ArtifactName: 'cucumber-reports'
    publishLocation: 'Container'
  displayName: 'Publish Cucumber Reports'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/karate-reports'
    ArtifactName: 'karate-reports'
    publishLocation: 'Container'
  displayName: 'Publish Karate Reports'

- task: PowerShell@2
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Starting to process test results..."
      
      # Buscar en archivos Cucumber JSON
      Write-Host "Searching in Cucumber JSON reports..."
      $jsonFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)/target" -Recurse -Filter "*.json"
      
      foreach ($file in $jsonFiles) {
          Write-Host "Processing JSON file: $($file.FullName)"
          try {
              $jsonContent = Get-Content $file -Raw | ConvertFrom-Json
              
              if ($jsonContent.elements) {
                  Write-Host "Found test scenarios in JSON"
                  foreach ($element in $jsonContent.elements) {
                      if ($element.tags) {
                          foreach ($tag in $element.tags) {
                              Write-Host "Processing tag: $($tag.name)"
                              if ($tag.name -match '@TestCase=(\d+)') {
                                  $testCaseId = $matches[1]
                                  $outcome = "Passed"
                                  $scenarioName = $element.name
                                  
                                  # Verificar si hay pasos fallidos
                                  foreach ($step in $element.steps) {
                                      if ($step.result.status -eq "failed") {
                                          $outcome = "Failed"
                                          Write-Host "Found failed step in scenario: $scenarioName"
                                          break
                                      }
                                  }
                                  
                                  Write-Host "Updating Test Case #$testCaseId with result: $outcome for scenario: $scenarioName"
                                  Write-Host "##vso[test.updatetestresult testCaseId=$testCaseId;result=$outcome]"
                              }
                          }
                      }
                  }
              } else {
                  Write-Host "No test scenarios found in JSON file"
              }
          }
          catch {
              Write-Host "Error processing JSON file: $_"
              Write-Host "File content:"
              Get-Content $file -Raw
          }
      }
      
      if (-not $jsonFiles) {
          Write-Host "No JSON files found in target directory"
          Write-Host "Listing target directory content:"
          Get-ChildItem -Path "$(Build.SourcesDirectory)/target" -Recurse | ForEach-Object {
              Write-Host $_.FullName
          }
      }
  displayName: 'Update Test Cases in Azure Test Plans'