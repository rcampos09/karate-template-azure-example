trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'
  displayName: 'Set up JDK 17'

# Crear el directorio de caché si no existe
- bash: |
    mkdir -p $(MAVEN_CACHE_FOLDER)
  displayName: 'Create Maven cache directory'

- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
    path: $(MAVEN_CACHE_FOLDER)
  displayName: 'Cache Maven packages'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean verify'
    options: '-Dkarate.env=qa'
    publishJUnitResults: true 
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    mavenVersionOption: 'Default'
  displayName: 'Run Karate Tests'

- task: PublishTestResults@2
  condition: always()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'Karate Tests'
  displayName: 'Publish Test Results'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/cucumber-reports'
    ArtifactName: 'cucumber-reports'
    publishLocation: 'Container'
  displayName: 'Publish Cucumber Reports'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/karate-reports'
    ArtifactName: 'karate-reports'
    publishLocation: 'Container'
  displayName: 'Publish Karate Reports'

# Actualizar Test Cases usando la API REST
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Starting to process test results..."
      
      # Configuración de la API
      $organization = "https://dev.azure.com/dontester"
      $project = "Automated%20Test%20Plan"
      $pat = "$(System.AccessToken)"
      $apiVersion = "7.1-preview.1"
      
      # Codificar el PAT para la autenticación
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$pat"))
      
      # Función para actualizar el resultado del test case
      function Update-TestCase {
          param (
              [string]$testCaseId,
              [string]$outcome,
              [string]$scenarioName
          )
          
          $testPoint = $null
          
          # 1. Obtener el Test Plan ID primero
          $testPlansUrl = "$organization/$project/_apis/test/plans?api-version=$apiVersion"
          Write-Host "Getting Test Plans: $testPlansUrl"
          
          try {
              $testPlansResponse = Invoke-RestMethod -Uri $testPlansUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Get
              if ($testPlansResponse.value -and $testPlansResponse.value.length -gt 0) {
                  $testPlanId = $testPlansResponse.value[0].id
                  Write-Host "Found Test Plan ID: $testPlanId"
                  
                  # 2. Obtener el Test Suite
                  $testSuitesUrl = "$organization/$project/_apis/test/plans/$testPlanId/suites?api-version=$apiVersion"
                  Write-Host "Getting Test Suites: $testSuitesUrl"
                  
                  $testSuitesResponse = Invoke-RestMethod -Uri $testSuitesUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Get
                  if ($testSuitesResponse.value -and $testSuitesResponse.value.length -gt 0) {
                      $testSuiteId = $testSuitesResponse.value[0].id
                      Write-Host "Found Test Suite ID: $testSuiteId"
                      
                      # 3. Obtener el Test Point
                      $testPointsUrl = "$organization/$project/_apis/test/Plans/$testPlanId/Suites/$testSuiteId/Points?testCaseId=$testCaseId&api-version=$apiVersion"
                      Write-Host "Getting Test Points: $testPointsUrl"
                      
                      $testPointsResponse = Invoke-RestMethod -Uri $testPointsUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Get
                      if ($testPointsResponse.value -and $testPointsResponse.value.length -gt 0) {
                          $testPoint = $testPointsResponse.value[0].id
                          Write-Host "Found Test Point ID: $testPoint"
                          
                          # 4. Crear Test Run y actualizar resultado
                          $createRunUrl = "$organization/$project/_apis/test/runs?api-version=$apiVersion"
                          $createRunBody = @{
                              name = "Karate Test Run - $scenarioName"
                              plan = @{ id = $testPlanId }
                              pointIds = @($testPoint)
                          } | ConvertTo-Json
                          
                          Write-Host "Creating Test Run: $createRunUrl"
                          $testRun = Invoke-RestMethod -Uri $createRunUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Post -Body $createRunBody -ContentType "application/json"
                          
                          $updateResultUrl = "$organization/$project/_apis/test/runs/$($testRun.id)/results?api-version=$apiVersion"
                          $updateResultBody = @{
                              testPoint = @{ id = $testPoint }
                              outcome = $outcome
                              state = "Completed"
                          } | ConvertTo-Json
                          
                          Write-Host "Updating Test Result: $updateResultUrl"
                          $updateResponse = Invoke-RestMethod -Uri $updateResultUrl -Headers @{Authorization = "Basic $base64AuthInfo"} -Method Patch -Body $updateResultBody -ContentType "application/json"
                          Write-Host "Successfully updated test case $testCaseId with outcome $outcome"
                      }
                  }
              }
          }
          catch {
              Write-Host "Error in API call: $_"
              Write-Host "Response: $($_.ErrorDetails.Message)"
          }
      }
      
      # Procesar los resultados de Karate
      $jsonFiles = Get-ChildItem -Path "$(Build.SourcesDirectory)/target" -Recurse -Filter "*.json"
      
      foreach ($file in $jsonFiles) {
          Write-Host "Processing file: $($file.FullName)"
          try {
              $jsonContent = Get-Content $file -Raw | ConvertFrom-Json
              
              if ($jsonContent.elements) {
                  foreach ($element in $jsonContent.elements) {
                      if ($element.tags) {
                          foreach ($tag in $element.tags) {
                              if ($tag.name -match '@TestCase=(\d+)') {
                                  $testCaseId = $matches[1]
                                  $outcome = "Passed"
                                  $scenarioName = $element.name
                                  
                                  foreach ($step in $element.steps) {
                                      if ($step.result.status -eq "failed") {
                                          $outcome = "Failed"
                                          break
                                      }
                                  }
                                  
                                  Write-Host "Updating Test Case #$testCaseId with outcome $outcome"
                                  Update-TestCase -testCaseId $testCaseId -outcome $outcome -scenarioName $scenarioName
                              }
                          }
                      }
                  }
              }
          }
          catch {
              Write-Host "Error processing JSON file: $_"
          }
      }
  displayName: 'Update Test Cases in Azure Test Plans'