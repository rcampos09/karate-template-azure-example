trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

steps:
- task: Cache@2
  inputs:
    key: 'maven | "$(Agent.OS)" | **/pom.xml'
    restoreKeys: |
      maven | "$(Agent.OS)"
    path: $(MAVEN_CACHE_FOLDER)
  displayName: 'Cache Maven packages'

- task: JavaToolInstaller@0
  inputs:
    versionSpec: '17'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'
  displayName: 'Set up JDK 17'

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean verify'
    options: '-Dkarate.env=qa'
    publishJUnitResults: true 
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    mavenVersionOption: 'Default'
  displayName: 'Run Karate Tests'

- task: PublishTestResults@2
  condition: always()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'Karate Tests'
  displayName: 'Publish Test Results'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/cucumber-reports'
    ArtifactName: 'cucumber-reports'
    publishLocation: 'Container'
  displayName: 'Publish Cucumber Reports'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/target/karate-reports'
    ArtifactName: 'karate-reports'
    publishLocation: 'Container'
  displayName: 'Publish Karate Reports'

# Task opcional para actualizar Test Cases en Azure Test Plans
- task: PowerShell@2
  condition: always()
  inputs:
    targetType: 'inline'
    script: |
      $testResults = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)" -Recurse -Filter "TEST-*.xml"
      foreach ($result in $testResults) {
          $xml = [xml](Get-Content $result)
          foreach ($testCase in $xml.SelectNodes("//testcase")) {
              $testName = $testCase.name
              if ($testName -match "TC(\d+)") {
                  $testCaseId = $matches[1]
                  $outcome = "Passed"
                  if ($testCase.SelectNodes("failure|error").Count -gt 0) {
                      $outcome = "Failed"
                  }
                  Write-Host "##vso[test.updatetestresult testCaseId=$testCaseId;result=$outcome]"
              }
          }
      }
  displayName: 'Update Test Cases in Azure Test Plans'